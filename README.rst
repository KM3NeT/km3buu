KM3BUU
======

.. image:: https://git.km3net.de/simulation/km3buu/badges/master/pipeline.svg
    :target: https://git.km3net.de/simulation/km3buu/pipelines

.. image:: https://git.km3net.de/simulation/km3buu/badges/master/coverage.svg

**This is NOT an official KM3NeT software package.**

The KM3BUU project is an integrated python framework for wrapping the GiBUU particle interaction simulation https://gibuu.hepforge.org/trac/wiki . It is specifically designed for studies within the KM3NeT experiment and focuses on the neutrino simulation functionality of GiBUU.

The main code repository can be found at: https://git.km3net.de/simulation/km3buu

The framework covers all parts of the GiBUU workflow, which includes setting up the simulation configuarion inside a so-called jobcarb, running GiBUU and parsing the output files.

Installation
------------

The main `KM3BUU` project is a python based framework, which can be used with a
local GiBUU installation or used within a docker container. In order to install the `km3buu` python module the repository has to be retreived from the Git server first.

From KM3NeT GitLab:

.. code-block:: console

   git clone https://git.km3net.de/simulation/km3buu
   cd km3buu

From GitHub:

.. code-block:: console

   git clone https://github.com/KM3NeT/km3buu
   cd km3buu

After downloading the repository the package can be installed via:

.. code-block:: console

   pip install -e

(Up to now `KM3BUU` is not provided via python package manager.)

If working inside a docker environment is recommended, the KM3BUU image can be copied&run directly from the KM3NeT docker server:

.. code-block:: console

   docker run -it --rm docker.km3net.de/simulation/km3buu:latest /bin/bash

or built locally:

.. code-block:: console

   cd km3buu
   docker build .

The docker image contains the latest release of `km3buu` as well as the GiBUU 2021 Patch 4 (release from 2023-03-23) including RootTuple extension is installed (km3buu v1.0.0).


Getting started
---------------
The GiBUU workflow starts from a jobcard which contains the configuration which should be simulated. The jobcards are technically FORTRAN namelists and can be created using a `Jobcard` object. In the example this is done via loading an existing jobcard:

.. code-block:: python3

    >>> from km3buu.jobcard import Jobcard, read_jobcard

    >>> jc = read_jobcard("jobcards/examples/example.job")

Alternatively a neutrino jobcard can be generated from scratch via

... code-block:: python3

    >>> from km3buu.jobcard import Jobcard, generate_neutrino_jobcard


    >>> ?generate_neutrino_jobcard

    Signature:
    generate_neutrino_jobcard(
        ensembles,
        runs,
        process,
        flavour,
        energy,
        target,
        write_pert=True,
        write_real=True,
        do_decay=False,
        photon_propagation=True,
        fluxfile=None,
        seed=None,
        timesteps=-1,
        input_path='/opt/buuinput2021/',
    )
    Docstring:
    Generate a jobcard for neutrino interaction

    Parameters
    ----------
    ensembles: int
        Simulated number of ensembles per nucleon & runs, which will result in #events < ensembles * runs
    runs: int
        Number of runs which should be executed by
    process: str
        Interaction channel ["CC", "NC", "antiCC", "antiNC"]
    flavour: str
        Flavour ["electron", "muon", "tau"]
    energy: float, tuple
        Initial energy or energy range (emin, emax) of the primary neutrino in GeV
    target: (int, int)
        (A, Z) properties of the target nucleus
    write_pert: boolean (default: True)
        Write perturbative particles
    write_real: boolean (default: False)
        Write real particles
    do_decay: boolean (default: False)
        Decay final state particles using PYTHIA
    photon_propagation: boolean (default: True)
        Propagate photons and write it out
    fluxfile: str (default: None)
        Fluxfile, 1st col energy [GeV] and 2nd col flux [A.U.]
    seed: int (default: 0)
        Input seed for the random number generator in GiBUU
        (0: some seed will be drawn based on system time)
    timesteps: int (default: -1)
        Number of timesteps done by GiBUU
        (-1: Default value from GiBUU is used)
    input_path: str
        The input path pointing to the GiBUU lookup data which should be used
    File:      /opt/km3buu/jobcard.py
    Type:      function

    >>> generate_neutrino_jobcard(1000, 1, "CC", "muon", (1,10))

This jobcard is subsequently forwarded to GiBUU via the `run_jobcard` function. The second argument takes a directory which should be used to write out all the output files generated by GiBUU.

.. code-block:: python3

    >>> from km3buu.ctrl import run_jobcard

    >>> run_jobcard(jc, "./output")
    0

Finally, the output can be parsed using a `GiBUUOutput` object:

.. code-block:: python3

    >>> from km3buu.output import GiBUUOutput

    >>> data = GiBUUOutput("./output")

The event data can further be converted to a pandas dataframe

.. code-block:: python3

    >>> df = data.df

or an awkward array

.. code-block:: python3

    >>> arr = data.arrays
